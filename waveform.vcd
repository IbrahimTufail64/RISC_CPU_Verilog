$date
	Tue Apr 08 23:52:49 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_RISC_16 $end
$var wire 4 ! write_reg [3:0] $end
$var wire 8 " write_data [7:0] $end
$var wire 1 # reg_write $end
$var wire 4 $ read_reg2 [3:0] $end
$var wire 4 % read_reg1 [3:0] $end
$var wire 8 & read_data2 [7:0] $end
$var wire 8 ' read_data1_mux [7:0] $end
$var wire 8 ( read_data1 [7:0] $end
$var wire 8 ) read_data [7:0] $end
$var wire 8 * pc_increment [7:0] $end
$var wire 4 + opcode [3:0] $end
$var wire 1 , mem_write $end
$var wire 1 - load_signal $end
$var wire 1 . jump $end
$var wire 4 / instruction_addr [3:0] $end
$var wire 16 0 instruction [15:0] $end
$var wire 8 1 immediate [7:0] $end
$var wire 1 2 compare $end
$var wire 1 3 branch_increment_signal $end
$var wire 1 4 branch $end
$var wire 8 5 alu_result [7:0] $end
$var wire 1 6 ALU_src $end
$var reg 1 7 clk $end
$var reg 1 8 rst $end
$scope module alu $end
$var wire 1 7 clk $end
$var wire 4 9 opcode [3:0] $end
$var wire 8 : data_in2 [7:0] $end
$var wire 8 ; data_in1 [7:0] $end
$var wire 1 6 ALU_src $end
$var reg 1 2 compare $end
$var reg 8 < result [7:0] $end
$upscope $end
$scope module alu_input_selector $end
$var wire 1 - signal $end
$var wire 8 = mux_in2 [7:0] $end
$var wire 8 > mux_in1 [7:0] $end
$var reg 8 ? mux_out [7:0] $end
$upscope $end
$scope module branch_ALU $end
$var wire 1 2 b $end
$var wire 1 3 c $end
$var wire 1 4 a $end
$upscope $end
$scope module branch_mux $end
$var wire 8 @ mux_in1 [7:0] $end
$var wire 1 3 signal $end
$var wire 8 A mux_in2 [7:0] $end
$var reg 8 B mux_out [7:0] $end
$upscope $end
$scope module cu $end
$var wire 4 C opcode [3:0] $end
$var reg 1 6 ALU_src $end
$var reg 1 4 branch $end
$var reg 1 . jump $end
$var reg 1 - load $end
$var reg 1 , mem_write $end
$var reg 1 # reg_write $end
$upscope $end
$scope module id $end
$var wire 16 D instruction [15:0] $end
$var reg 8 E extended_value [7:0] $end
$var reg 8 F immediate [7:0] $end
$var reg 4 G opcode [3:0] $end
$var reg 4 H read_reg1 [3:0] $end
$var reg 4 I read_reg2 [3:0] $end
$var reg 4 J write_reg [3:0] $end
$upscope $end
$scope module im $end
$var wire 16 K instruction [15:0] $end
$var wire 4 L addr [3:0] $end
$var integer 32 M i [31:0] $end
$upscope $end
$scope module memory_ALU_mux $end
$var wire 8 N mux_in1 [7:0] $end
$var wire 1 - signal $end
$var wire 8 O mux_in2 [7:0] $end
$var reg 8 P mux_out [7:0] $end
$upscope $end
$scope module mm $end
$var wire 1 Q clk $end
$var wire 1 , mem_write $end
$var wire 8 R read_addr [7:0] $end
$var wire 8 S write_addr [7:0] $end
$var wire 8 T write_data [7:0] $end
$var reg 8 U read_data [7:0] $end
$var integer 32 V i [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 W clk $end
$var wire 4 X read_reg1 [3:0] $end
$var wire 4 Y read_reg2 [3:0] $end
$var wire 1 # reg_write $end
$var wire 8 Z write_data [7:0] $end
$var wire 4 [ write_reg [3:0] $end
$var reg 8 \ read_data1 [7:0] $end
$var reg 8 ] read_data2 [7:0] $end
$var integer 32 ^ i [31:0] $end
$upscope $end
$scope module uut $end
$var wire 1 7 clk $end
$var wire 1 . jump $end
$var wire 8 _ jump_label [7:0] $end
$var wire 8 ` pc_increment [7:0] $end
$var wire 1 8 rst $end
$var reg 4 a instruction_addr [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx a
b1 `
bx _
b10000 ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
zW
b100000000 V
bx U
bx T
bx S
bx R
zQ
bx P
bx O
bx N
b10000 M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
b1 B
bx A
b1 @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
08
07
06
bx 5
04
03
02
bx 1
bx 0
bx /
0.
0-
0,
bx +
b1 *
bx )
bx (
bx '
bx &
bx %
bx $
0#
bx "
bx !
$end
#10000
b101 "
b101 P
b101 Z
b101 )
b101 O
b101 U
b1011 5
b1011 <
b1011 N
b1011 R
b1011 S
b110 '
b110 ;
b110 ?
b101 &
b101 :
b101 ]
b101 (
b101 >
b101 T
b101 \
1,
1-
16
b110 1
b110 =
b110 A
b110 F
b110 _
b0 !
b0 J
b0 [
b110 E
b1 $
b1 I
b1 Y
b0 %
b0 H
b0 X
b1010 +
b1010 9
b1010 C
b1010 G
b1010000000010110 0
b1010000000010110 D
b1010000000010110 K
b0 /
b0 L
b0 a
18
17
#20000
08
07
#30000
1#
0,
1-
16
b101 !
b101 J
b101 [
b101 %
b101 H
b101 X
b1001 +
b1001 9
b1001 C
b1001 G
b1001010100010110 0
b1001010100010110 D
b1001010100010110 K
b1 /
b1 L
b1 a
07
#40000
b1001 )
b1001 O
b1001 U
b0 5
b0 <
b0 N
b0 R
b0 S
b0 "
b0 P
b0 Z
b101 '
b101 ;
b101 ?
0-
16
1#
b0 1
b0 =
b0 A
b0 F
b0 _
b1000 $
b1000 I
b1000 Y
b0 %
b0 H
b0 X
b101 +
b101 9
b101 C
b101 G
b101000010000101 0
b101000010000101 D
b101000010000101 K
b10 /
b10 L
b10 a
17
#50000
07
#60000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 '
b0 ;
b0 ?
b0 (
b0 >
b0 T
b0 \
16
1#
b111 !
b111 J
b111 [
b101 %
b101 H
b101 X
b110 +
b110 9
b110 C
b110 G
b110010110000111 0
b110010110000111 D
b110010110000111 K
b11 /
b11 L
b11 a
17
#70000
07
#80000
b10 *
b10 B
b10 `
13
12
b101 '
b101 ;
b101 ?
b0 &
b0 :
b0 ]
b101 (
b101 >
b101 T
b101 \
14
16
0#
b10 1
b10 =
b10 A
b10 F
b10 _
b0 !
b0 J
b0 [
b10 E
b111 $
b111 I
b111 Y
b0 %
b0 H
b0 X
b1000 +
b1000 9
b1000 C
b1000 G
b1000000001110010 0
b1000000001110010 D
b1000000001110010 K
b100 /
b100 L
b100 a
17
#90000
07
#100000
b0 5
b0 <
b0 N
b0 R
b0 S
02
03
b1 *
b1 B
b1 `
b101 &
b101 :
b101 ]
1#
16
04
b0 1
b0 =
b0 A
b0 F
b0 _
b10 !
b10 J
b10 [
b1 $
b1 I
b1 Y
b101 +
b101 9
b101 C
b101 G
b101000000010010 0
b101000000010010 D
b101000000010010 K
b110 /
b110 L
b110 a
17
#110000
07
#120000
1.
06
0#
b0 !
b0 J
b0 [
b0 E
b0 $
b0 I
b0 Y
b1011 +
b1011 9
b1011 C
b1011 G
b1011000000000000 0
b1011000000000000 D
b1011000000000000 K
b111 /
b111 L
b111 a
17
#130000
07
#140000
b101 )
b101 O
b101 U
b1011 5
b1011 <
b1011 N
b1011 R
b1011 S
b101 "
b101 P
b101 Z
b110 '
b110 ;
b110 ?
1,
1-
16
0.
b110 1
b110 =
b110 A
b110 F
b110 _
b110 E
b1 $
b1 I
b1 Y
b1010 +
b1010 9
b1010 C
b1010 G
b1010000000010110 0
b1010000000010110 D
b1010000000010110 K
b0 /
b0 L
b0 a
17
#150000
07
#160000
b101 (
b101 >
b101 T
b101 \
1#
0,
1-
16
b101 !
b101 J
b101 [
b101 %
b101 H
b101 X
b1001 +
b1001 9
b1001 C
b1001 G
b1001010100010110 0
b1001010100010110 D
b1001010100010110 K
b1 /
b1 L
b1 a
17
#170000
07
#180000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 "
b0 P
b0 Z
b101 '
b101 ;
b101 ?
0-
16
1#
b0 1
b0 =
b0 A
b0 F
b0 _
b1000 $
b1000 I
b1000 Y
b0 %
b0 H
b0 X
b101 +
b101 9
b101 C
b101 G
b101000010000101 0
b101000010000101 D
b101000010000101 K
b10 /
b10 L
b10 a
17
#190000
07
#200000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 '
b0 ;
b0 ?
b0 (
b0 >
b0 T
b0 \
16
1#
b111 !
b111 J
b111 [
b101 %
b101 H
b101 X
b110 +
b110 9
b110 C
b110 G
b110010110000111 0
b110010110000111 D
b110010110000111 K
b11 /
b11 L
b11 a
17
#210000
07
#220000
b10 *
b10 B
b10 `
13
12
b101 '
b101 ;
b101 ?
b0 &
b0 :
b0 ]
b101 (
b101 >
b101 T
b101 \
14
16
0#
b10 1
b10 =
b10 A
b10 F
b10 _
b0 !
b0 J
b0 [
b10 E
b111 $
b111 I
b111 Y
b0 %
b0 H
b0 X
b1000 +
b1000 9
b1000 C
b1000 G
b1000000001110010 0
b1000000001110010 D
b1000000001110010 K
b100 /
b100 L
b100 a
17
#230000
07
#240000
b0 5
b0 <
b0 N
b0 R
b0 S
02
03
b1 *
b1 B
b1 `
b101 &
b101 :
b101 ]
1#
16
04
b0 1
b0 =
b0 A
b0 F
b0 _
b10 !
b10 J
b10 [
b1 $
b1 I
b1 Y
b101 +
b101 9
b101 C
b101 G
b101000000010010 0
b101000000010010 D
b101000000010010 K
b110 /
b110 L
b110 a
17
#250000
07
#260000
1.
06
0#
b0 !
b0 J
b0 [
b0 E
b0 $
b0 I
b0 Y
b1011 +
b1011 9
b1011 C
b1011 G
b1011000000000000 0
b1011000000000000 D
b1011000000000000 K
b111 /
b111 L
b111 a
17
#270000
07
#280000
b1011 5
b1011 <
b1011 N
b1011 R
b1011 S
b101 "
b101 P
b101 Z
b110 '
b110 ;
b110 ?
1,
1-
16
0.
b110 1
b110 =
b110 A
b110 F
b110 _
b110 E
b1 $
b1 I
b1 Y
b1010 +
b1010 9
b1010 C
b1010 G
b1010000000010110 0
b1010000000010110 D
b1010000000010110 K
b0 /
b0 L
b0 a
17
#290000
07
#300000
b101 (
b101 >
b101 T
b101 \
1#
0,
1-
16
b101 !
b101 J
b101 [
b101 %
b101 H
b101 X
b1001 +
b1001 9
b1001 C
b1001 G
b1001010100010110 0
b1001010100010110 D
b1001010100010110 K
b1 /
b1 L
b1 a
17
#310000
07
#320000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 "
b0 P
b0 Z
b101 '
b101 ;
b101 ?
0-
16
1#
b0 1
b0 =
b0 A
b0 F
b0 _
b1000 $
b1000 I
b1000 Y
b0 %
b0 H
b0 X
b101 +
b101 9
b101 C
b101 G
b101000010000101 0
b101000010000101 D
b101000010000101 K
b10 /
b10 L
b10 a
17
#330000
07
#340000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 '
b0 ;
b0 ?
b0 (
b0 >
b0 T
b0 \
16
1#
b111 !
b111 J
b111 [
b101 %
b101 H
b101 X
b110 +
b110 9
b110 C
b110 G
b110010110000111 0
b110010110000111 D
b110010110000111 K
b11 /
b11 L
b11 a
17
#350000
07
#360000
b10 *
b10 B
b10 `
13
12
b101 '
b101 ;
b101 ?
b0 &
b0 :
b0 ]
b101 (
b101 >
b101 T
b101 \
14
16
0#
b10 1
b10 =
b10 A
b10 F
b10 _
b0 !
b0 J
b0 [
b10 E
b111 $
b111 I
b111 Y
b0 %
b0 H
b0 X
b1000 +
b1000 9
b1000 C
b1000 G
b1000000001110010 0
b1000000001110010 D
b1000000001110010 K
b100 /
b100 L
b100 a
17
#370000
07
#380000
b0 5
b0 <
b0 N
b0 R
b0 S
02
03
b1 *
b1 B
b1 `
b101 &
b101 :
b101 ]
1#
16
04
b0 1
b0 =
b0 A
b0 F
b0 _
b10 !
b10 J
b10 [
b1 $
b1 I
b1 Y
b101 +
b101 9
b101 C
b101 G
b101000000010010 0
b101000000010010 D
b101000000010010 K
b110 /
b110 L
b110 a
17
#390000
07
#400000
1.
06
0#
b0 !
b0 J
b0 [
b0 E
b0 $
b0 I
b0 Y
b1011 +
b1011 9
b1011 C
b1011 G
b1011000000000000 0
b1011000000000000 D
b1011000000000000 K
b111 /
b111 L
b111 a
17
#410000
07
#420000
b1011 5
b1011 <
b1011 N
b1011 R
b1011 S
b101 "
b101 P
b101 Z
b110 '
b110 ;
b110 ?
1,
1-
16
0.
b110 1
b110 =
b110 A
b110 F
b110 _
b110 E
b1 $
b1 I
b1 Y
b1010 +
b1010 9
b1010 C
b1010 G
b1010000000010110 0
b1010000000010110 D
b1010000000010110 K
b0 /
b0 L
b0 a
17
#430000
07
#440000
b101 (
b101 >
b101 T
b101 \
1#
0,
1-
16
b101 !
b101 J
b101 [
b101 %
b101 H
b101 X
b1001 +
b1001 9
b1001 C
b1001 G
b1001010100010110 0
b1001010100010110 D
b1001010100010110 K
b1 /
b1 L
b1 a
17
#450000
07
#460000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 "
b0 P
b0 Z
b101 '
b101 ;
b101 ?
0-
16
1#
b0 1
b0 =
b0 A
b0 F
b0 _
b1000 $
b1000 I
b1000 Y
b0 %
b0 H
b0 X
b101 +
b101 9
b101 C
b101 G
b101000010000101 0
b101000010000101 D
b101000010000101 K
b10 /
b10 L
b10 a
17
#470000
07
#480000
b0 5
b0 <
b0 N
b0 R
b0 S
b0 '
b0 ;
b0 ?
b0 (
b0 >
b0 T
b0 \
16
1#
b111 !
b111 J
b111 [
b101 %
b101 H
b101 X
b110 +
b110 9
b110 C
b110 G
b110010110000111 0
b110010110000111 D
b110010110000111 K
b11 /
b11 L
b11 a
17
#490000
07
#500000
b10 *
b10 B
b10 `
13
12
b101 '
b101 ;
b101 ?
b0 &
b0 :
b0 ]
b101 (
b101 >
b101 T
b101 \
14
16
0#
b10 1
b10 =
b10 A
b10 F
b10 _
b0 !
b0 J
b0 [
b10 E
b111 $
b111 I
b111 Y
b0 %
b0 H
b0 X
b1000 +
b1000 9
b1000 C
b1000 G
b1000000001110010 0
b1000000001110010 D
b1000000001110010 K
b100 /
b100 L
b100 a
17
#510000
07
#520000
b0 5
b0 <
b0 N
b0 R
b0 S
02
03
b1 *
b1 B
b1 `
b101 &
b101 :
b101 ]
1#
16
04
b0 1
b0 =
b0 A
b0 F
b0 _
b10 !
b10 J
b10 [
b1 $
b1 I
b1 Y
b101 +
b101 9
b101 C
b101 G
b101000000010010 0
b101000000010010 D
b101000000010010 K
b110 /
b110 L
b110 a
17
#530000
07
