$date
	Wed Mar 19 17:55:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_RISC_16 $end
$var wire 4 ! write_reg [3:0] $end
$var wire 8 " write_data [7:0] $end
$var wire 1 # reg_write $end
$var wire 4 $ read_reg2 [3:0] $end
$var wire 4 % read_reg1 [3:0] $end
$var wire 8 & read_data2 [7:0] $end
$var wire 8 ' read_data1_mux [7:0] $end
$var wire 8 ( read_data1 [7:0] $end
$var wire 8 ) read_data [7:0] $end
$var wire 8 * pc_increment [7:0] $end
$var wire 4 + opcode [3:0] $end
$var wire 1 , mem_write $end
$var wire 1 - load_signal $end
$var wire 4 . instruction_addr [3:0] $end
$var wire 16 / instruction [15:0] $end
$var wire 8 0 immediate [7:0] $end
$var wire 1 1 compare $end
$var wire 1 2 branch_increment_signal $end
$var wire 1 3 branch $end
$var wire 8 4 alu_result [7:0] $end
$var wire 1 5 ALU_src $end
$var reg 1 6 clk $end
$var reg 1 7 rst $end
$scope module alu $end
$var wire 1 6 clk $end
$var wire 4 8 opcode [3:0] $end
$var wire 8 9 data_in2 [7:0] $end
$var wire 8 : data_in1 [7:0] $end
$var wire 1 5 ALU_src $end
$var reg 1 1 compare $end
$var reg 8 ; result [7:0] $end
$upscope $end
$scope module alu_input_selector $end
$var wire 1 - signal $end
$var wire 8 < mux_in2 [7:0] $end
$var wire 8 = mux_in1 [7:0] $end
$var reg 8 > mux_out [7:0] $end
$upscope $end
$scope module branch_ALU $end
$var wire 1 1 b $end
$var wire 1 2 c $end
$var wire 1 3 a $end
$upscope $end
$scope module branch_mux $end
$var wire 8 ? mux_in1 [7:0] $end
$var wire 1 2 signal $end
$var wire 8 @ mux_in2 [7:0] $end
$var reg 8 A mux_out [7:0] $end
$upscope $end
$scope module cu $end
$var wire 4 B opcode [3:0] $end
$var reg 1 5 ALU_src $end
$var reg 1 3 branch $end
$var reg 1 - load $end
$var reg 1 , mem_write $end
$var reg 1 # reg_write $end
$upscope $end
$scope module id $end
$var wire 16 C instruction [15:0] $end
$var reg 8 D extended_value [7:0] $end
$var reg 8 E immediate [7:0] $end
$var reg 4 F opcode [3:0] $end
$var reg 4 G read_reg1 [3:0] $end
$var reg 4 H read_reg2 [3:0] $end
$var reg 4 I write_reg [3:0] $end
$upscope $end
$scope module im $end
$var wire 16 J instruction [15:0] $end
$var wire 4 K addr [3:0] $end
$var integer 32 L i [31:0] $end
$upscope $end
$scope module memory_ALU_mux $end
$var wire 8 M mux_in1 [7:0] $end
$var wire 1 - signal $end
$var wire 8 N mux_in2 [7:0] $end
$var reg 8 O mux_out [7:0] $end
$upscope $end
$scope module mm $end
$var wire 1 P clk $end
$var wire 1 , mem_write $end
$var wire 8 Q read_addr [7:0] $end
$var wire 8 R write_addr [7:0] $end
$var wire 8 S write_data [7:0] $end
$var reg 8 T read_data [7:0] $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 V clk $end
$var wire 4 W read_reg1 [3:0] $end
$var wire 4 X read_reg2 [3:0] $end
$var wire 1 # reg_write $end
$var wire 8 Y write_data [7:0] $end
$var wire 4 Z write_reg [3:0] $end
$var reg 8 [ read_data1 [7:0] $end
$var reg 8 \ read_data2 [7:0] $end
$var integer 32 ] i [31:0] $end
$upscope $end
$scope module uut $end
$var wire 1 6 clk $end
$var wire 8 ^ pc_increment [7:0] $end
$var wire 1 7 rst $end
$var reg 4 _ instruction_addr [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx _
b1 ^
b10000 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
zV
b100000000 U
bx T
bx S
bx R
bx Q
zP
bx O
bx N
bx M
b10000 L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
b1 A
bx @
b1 ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
07
06
05
bx 4
03
02
01
bx 0
bx /
bx .
0-
0,
bx +
b1 *
bx )
bx (
bx '
bx &
bx %
bx $
0#
bx "
bx !
$end
#10000
b101 "
b101 O
b101 Y
b101 )
b101 N
b101 T
b1011 4
b1011 ;
b1011 M
b1011 Q
b1011 R
b110 '
b110 :
b110 >
b101 &
b101 9
b101 \
b101 (
b101 =
b101 S
b101 [
1,
1-
15
b110 0
b110 <
b110 @
b110 E
b0 !
b0 I
b0 Z
b110 D
b1 $
b1 H
b1 X
b0 %
b0 G
b0 W
b111 +
b111 8
b111 B
b111 F
b111000000010110 /
b111000000010110 C
b111000000010110 J
b0 .
b0 K
b0 _
17
16
#20000
07
06
#30000
1#
0,
1-
15
b101 !
b101 I
b101 Z
b101 %
b101 G
b101 W
b110 +
b110 8
b110 B
b110 F
b110010100010110 /
b110010100010110 C
b110010100010110 J
b1 .
b1 K
b1 _
06
#40000
b1001 (
b1001 =
b1001 S
b1001 [
b1001 "
b1001 O
b1001 Y
b1001 )
b1001 N
b1001 T
b1010 4
b1010 ;
b1010 M
b1010 Q
b1010 R
b101 '
b101 :
b101 >
b101 0
b101 <
b101 @
b101 E
b0 !
b0 I
b0 Z
b101 D
b100 $
b100 H
b100 X
b0 %
b0 G
b0 W
b110000001000101 /
b110000001000101 C
b110000001000101 J
b10 .
b10 K
b10 _
16
#50000
06
#60000
b1100 4
b1100 ;
b1100 M
b1100 Q
b1100 R
b111 '
b111 :
b111 >
b111 0
b111 <
b111 @
b111 E
b111 D
b101 $
b101 H
b101 X
b110000001010111 /
b110000001010111 C
b110000001010111 J
b11 .
b11 K
b11 _
16
#70000
06
#80000
b100 4
b100 ;
b100 M
b100 Q
b100 R
b100 "
b100 O
b100 Y
b1001 '
b1001 :
b1001 >
0-
15
1#
b0 0
b0 <
b0 @
b0 E
b1011 !
b1011 I
b1011 Z
b1100 $
b1100 H
b1100 X
b1 +
b1 8
b1 B
b1 F
b1000011001011 /
b1000011001011 C
b1000011001011 J
b100 .
b100 K
b100 _
16
#90000
06
#100000
13
15
0#
b0 !
b0 I
b0 Z
b0 D
b1 $
b1 H
b1 X
b101 +
b101 8
b101 B
b101 F
b101000000010000 /
b101000000010000 C
b101000000010000 J
b101 .
b101 K
b101 _
16
#110000
06
#120000
b10 0
b10 <
b10 @
b10 E
b10 D
b101000000010010 /
b101000000010010 C
b101000000010010 J
b110 .
b110 K
b110 _
16
#130000
06
#140000
b101 "
b101 O
b101 Y
b101 4
b101 ;
b101 M
b101 Q
b101 R
b101 '
b101 :
b101 >
b101 (
b101 =
b101 S
b101 [
1#
15
03
b0 0
b0 <
b0 @
b0 E
b1011 !
b1011 I
b1011 Z
b1100 $
b1100 H
b1100 X
b100 %
b100 G
b100 W
b11 +
b11 8
b11 B
b11 F
b11010011001011 /
b11010011001011 C
b11010011001011 J
b111 .
b111 K
b111 _
16
#150000
06
#160000
b0 "
b0 O
b0 Y
b0 4
b0 ;
b0 M
b0 Q
b0 R
b0 '
b0 :
b0 >
b0 &
b0 9
b0 \
b0 (
b0 =
b0 S
b0 [
15
1#
b0 !
b0 I
b0 Z
b0 $
b0 H
b0 X
b0 %
b0 G
b0 W
b0 +
b0 8
b0 B
b0 F
b0 /
b0 C
b0 J
b1000 .
b1000 K
b1000 _
16
#170000
06
#180000
b1001 .
b1001 K
b1001 _
16
#190000
06
#200000
b1010 .
b1010 K
b1010 _
16
#210000
06
#220000
b1011 .
b1011 K
b1011 _
16
#230000
06
#240000
b1100 .
b1100 K
b1100 _
16
#250000
06
#260000
b1101 .
b1101 K
b1101 _
16
#270000
06
#280000
b1110 .
b1110 K
b1110 _
16
#290000
06
#300000
b1111 .
b1111 K
b1111 _
16
#310000
06
#320000
b0 )
b0 N
b0 T
b1011 4
b1011 ;
b1011 M
b1011 Q
b1011 R
b0 "
b0 O
b0 Y
b110 '
b110 :
b110 >
b101 &
b101 9
b101 \
1,
1-
15
0#
b110 0
b110 <
b110 @
b110 E
b110 D
b1 $
b1 H
b1 X
b111 +
b111 8
b111 B
b111 F
b111000000010110 /
b111000000010110 C
b111000000010110 J
b0 .
b0 K
b0 _
16
#330000
06
#340000
b0 (
b0 =
b0 S
b0 [
1#
0,
1-
15
b101 !
b101 I
b101 Z
b101 %
b101 G
b101 W
b110 +
b110 8
b110 B
b110 F
b110010100010110 /
b110010100010110 C
b110010100010110 J
b1 .
b1 K
b1 _
16
#350000
06
#360000
b1001 (
b1001 =
b1001 S
b1001 [
b1001 "
b1001 O
b1001 Y
b1001 )
b1001 N
b1001 T
b1010 4
b1010 ;
b1010 M
b1010 Q
b1010 R
b101 '
b101 :
b101 >
b101 0
b101 <
b101 @
b101 E
b0 !
b0 I
b0 Z
b101 D
b100 $
b100 H
b100 X
b0 %
b0 G
b0 W
b110000001000101 /
b110000001000101 C
b110000001000101 J
b10 .
b10 K
b10 _
16
#370000
06
#380000
b111 4
b111 ;
b111 M
b111 Q
b111 R
b111 '
b111 :
b111 >
b0 &
b0 9
b0 \
b111 0
b111 <
b111 @
b111 E
b111 D
b101 $
b101 H
b101 X
b110000001010111 /
b110000001010111 C
b110000001010111 J
b11 .
b11 K
b11 _
16
#390000
06
#400000
b100 4
b100 ;
b100 M
b100 Q
b100 R
b100 "
b100 O
b100 Y
b1001 '
b1001 :
b1001 >
b101 &
b101 9
b101 \
0-
15
1#
b0 0
b0 <
b0 @
b0 E
b1011 !
b1011 I
b1011 Z
b1100 $
b1100 H
b1100 X
b1 +
b1 8
b1 B
b1 F
b1000011001011 /
b1000011001011 C
b1000011001011 J
b100 .
b100 K
b100 _
16
#410000
06
#420000
13
15
0#
b0 !
b0 I
b0 Z
b0 D
b1 $
b1 H
b1 X
b101 +
b101 8
b101 B
b101 F
b101000000010000 /
b101000000010000 C
b101000000010000 J
b101 .
b101 K
b101 _
16
#430000
06
#440000
b10 0
b10 <
b10 @
b10 E
b10 D
b101000000010010 /
b101000000010010 C
b101000000010010 J
b110 .
b110 K
b110 _
16
#450000
06
#460000
b101 "
b101 O
b101 Y
b101 4
b101 ;
b101 M
b101 Q
b101 R
b101 '
b101 :
b101 >
b101 (
b101 =
b101 S
b101 [
1#
15
03
b0 0
b0 <
b0 @
b0 E
b1011 !
b1011 I
b1011 Z
b1100 $
b1100 H
b1100 X
b100 %
b100 G
b100 W
b11 +
b11 8
b11 B
b11 F
b11010011001011 /
b11010011001011 C
b11010011001011 J
b111 .
b111 K
b111 _
16
#470000
06
#480000
b0 )
b0 N
b0 T
b0 "
b0 O
b0 Y
b0 4
b0 ;
b0 M
b0 Q
b0 R
b0 '
b0 :
b0 >
b0 &
b0 9
b0 \
b0 (
b0 =
b0 S
b0 [
15
1#
b0 !
b0 I
b0 Z
b0 $
b0 H
b0 X
b0 %
b0 G
b0 W
b0 +
b0 8
b0 B
b0 F
b0 /
b0 C
b0 J
b1000 .
b1000 K
b1000 _
16
#490000
06
#500000
b1001 .
b1001 K
b1001 _
16
#510000
06
#520000
b1010 .
b1010 K
b1010 _
16
#530000
06
